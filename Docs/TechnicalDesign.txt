** Action State Machine **

*** Concepts ***
- There are actions. These actions are unique.
- A character can only be performing one action at a time (only can be in one state).
- An action has one or more animations that is played.
- In general, an "action state" or just "action" will execute until the end of the action's animation.
- Most actions will return to the "idle" state.
- The idle states (standing, crouching, jump, etc) transition into attacks and other actions "commanded" by the player.


*** Input Handling ***
- Player input is polled at the start of our game tick. 
- The change in input state needs to be stored somewhere which can be read by the game simulation.
- We going to store input once per game update (frame). This will let us replay inputs to produce
    exactly the same result for testing/replays/network syncronization.
- These stored input "commands" will drive character behavior.

*** Character Controller ***
- The character will be controlled by a state machine with unique states for each action.
- State transitions will represent changes from one action to another.
- Player control (player input) will trigger state transitions to the desired action.


*** Persistent Data Store ***
- Unmutable data
- Initialized at the start of a match
- Will not be stored for rollbacks. 
- Will not be updated by the game simulation.
- Can be modified by the editor


*** Allocators ***
- Potentially use the following allocators if we know the max memory used at compile time.
 std.heap.FixedBufferAllocator or std.heap.ThreadSafeFixedBufferAllocator

*** Character Data ***
- Max health
- Walk speed
- Backup speed
- Jump Velocity
- Jump Gravity

*** Action Properties **
- hitboxes
- duration of an action
- looping/not looping
- looping sections / animation sections
- hit properties
- sound fx
- animation
- transitions 


*** Hitboxes ***
- Group hitboxes together. 
- These "groups" exists for a set amount of time during an action.
- Editable assets that can be referenced by an action and a time within that action. 
- At edit time, think about hitbox as (top, left, width and height). Might supports more transformations in editor.
- Runtime data structure. For each hitbox 4 integers (top, left, bottom, right)