* Agenda *
** 2022/3/19 **
- Hello World program
- Automated Build from Visual Studio Code
- Setup Debugging

** 2022/3/22 **
- Setup a git repo [x]
- Build and link raylib libraries [x]
- Show a Window [x]
- Add raylib to git repo [x]


** 2022/3/23
- Code Design Principles [x]
- Draw a circle on screen. [x]
- Add physics state for an object. [x]
- Move object each frame. [x]
- Reflect object position in the window. [x]
- Discussed game code architecture [x]


** 2022/3/25
- Break out game simulation into its own module/source [x]
- Create a physics component [x]
- Create physics system [x]
- Create 2D Vector struct. [x]
- Support velocity and acceleration [x]

** 2022/3/28
- Diagram Character State machine [x]

** 2022/3/30
- Start first pass implemenation of character state machine [x]
- Start using Zig test to verify functionality of the state machine [x]

** 2022/3/31
- Implement state transitions and test them [p]


** 2022/4/1
- Support state transitions in the state machine processor [x]

** 2022/4/5
- Add support for input commands. [x]
- Implement first pass at character controller states [x]


** 2022/4/8
- World to Screen space coordinate conversion [x]
- Implement a data store for character properties (attack properties, hitboxes, etc). [p]
- Hitbox debug display
- Hitbox collision
- Add second character to test hits

** 2022/4/11
- Implement a data store for character properties (attack properties, hitboxes, etc). [p]

2022/4/12/
- Begin work on collision system [x]


** Next Time **
- Free persistent memory store at the end of a game [x]
- Implement a independent game loop function outside of main() [x]


- Run the hitbox data through the collision system
- Create a collision event structure
- Generated hit events when hitboxes overlap

- Create test hitbox data to test collision system. 
- Test hitbox collision event generation

- Create a bunch of hitbox data for our character
- Create a second character to test hit interactions
- Create an attack action
- Create a reaction action 
- Implement a timeline data structure

** TBD **
- Create hit properties struct
- Implement reaction system
- Implement more character states (Attack, Reaction, Jump)
- Support action state variables (action time, hit stop)
- projectiles discussion
- animation discussion
- Make new run-time structure for storing hitboxes for the collision system.



