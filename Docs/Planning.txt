* Agenda *
** 2022/3/19 **
- Hello World program
- Automated Build from Visual Studio Code
- Setup Debugging

** 2022/3/22 **
- Setup a git repo [x]
- Build and link raylib libraries [x]
- Show a Window [x]
- Add raylib to git repo [x]


** 2022/3/23
- Code Design Principles [x]
- Draw a circle on screen. [x]
- Add physics state for an object. [x]
- Move object each frame. [x]
- Reflect object position in the window. [x]
- Discussed game code architecture [x]


** 2022/3/25
- Break out game simulation into its own module/source [x]
- Create a physics component [x]
- Create physics system [x]
- Create 2D Vector struct. [x]
- Support velocity and acceleration [x]

** 2022/3/28
- Diagram Character State machine [x]

** 2022/3/30
- Start first pass implemenation of character state machine [x]
- Start using Zig test to verify functionality of the state machine [x]

** 2022/3/31
- Implement state transitions and test them [p]


** 2022/4/1
- Support state transitions in the state machine processor [x]

** 2022/4/5
- Add support for input commands. [x]
- Implement first pass at character controller states [x]


** 2022/4/8
- World to Screen space coordinate conversion [x]
- Implement a data store for character properties (attack properties, hitboxes, etc). [p]
- Hitbox debug display
- Hitbox collision
- Add second character to test hits

** 2022/4/11
- Implement a data store for character properties (attack properties, hitboxes, etc). [p]

2022/4/12
- Begin work on collision system [x]

** 2022/4/21
- Free persistent memory store at the end of a game [x]
- Implement a independent game loop function outside of main() [x]

2022/4/25
- Test that scratch hitbox data used in the collision system is cleared out each frame. []
- Generate collision events and write tests to verify the required functionality. []
- Prepare character properties to be stored in the game's persistent store. [p]

2022/4/26
- Create a path for setting up character properties in code (actions, hitbox, etc) for testing the collision system.
- Create utility function for getting current active hitboxes from a character

2022/5/16
- Catch up on previous work.
- Plan for future streams.
- Test allocating character data with action and hitbox data [x]
- Remove test hitbox data from the GameData struct. [x]

2022/5/31
- Reading/Writing text files from storage in Zig [x].
- Research and test seraliazing data to JSON [x]

2022/6/2
- Attempt to read/write the game's Character Data from and to a JSON file [p].
- Move test code into game code [x].

2022/6/13
- Write deserializer that decodes the JSON object [x]
- Setup test character data and write it to a file [x]

2022/6/17
- Write a test that validates loading a json asset to a struct[x]

2022/6/21
- Create a action name map for looking up actions in the character data [x]
- Write tests validating use of the action name map [x]
- Used loaded character data when executing actions in the state machine [p].
- Pipeline the hitboxes from the character data to the collision system [p]

2022/6/23

- Copy translated hitbox data into the scratch hitbox memory for the collison system [x].
- Reset the number of items in the collision system scratch data every frame [x].
- Used loaded character data when executing actions in the state machine [p].
- Pipeline the hitboxes from the character data to the collision system [p]

2022/6/24
- Initialize the collision system in the game simulation [x]
- Create a character asset. Load it when starting the game [x]

2022/6/28
- Prototype 2 characters on the screen, each with at atleast one hitbox. Fire off
    a debug message when the two collide, and only when they initially overlap. [x]



2022/7/2
- Trigger an attack action with a button press  [x]
- Implemented a timeline component for dealing with action state active times [x]

2022/7/6
- Implement a hit reaction state. [x]
- Hit stun support [x]
- Return to idle when hit stun is over. [x]
- Create reaction transition [x]
- Add reaction action data to the character data file [x]
- Create the reaction system [x]
- Create Hit events [x]
- Clear out hit events each frame [x]
- Create a reaction component [x]
- Make sure hit events are only generated for the frame they first occurred. [x]

2022/7/7
- Support debug pause / frame step [x]
- Backup State [x]
- Jump State [x]
- Jump Physics [x]
- Colliding with ground triggers return to idle [x]
- Hit stop support for reacting player. [x]
- Hit stop support for attacking player. [x]
- Stop physics update during hitstop [x]
- Stop timeline updates during hitstop

2022/7/12
- Knockback Physics

2022/7/14
- Implement flipping characters to face their opponent


2022/9/1
- Review offstream changes [x]
- Prioritize what to do next [x]
- Support drawing flipped sprites [x]
- Support flipped knockback physics [x]

2022/9/*
- Support flipped physics
- Flip the character to face the attacking opponent on hit.
- Avoid reloading textures with hot reload. Or make 2 reloads, with one forcing a texture reload.
- Fix a bug where an action with vulnerable hitboxes cannot hit an opponent even if it has attack boxes.

2022/7/*
- Apply knockback based on the current facing direction.
- Implement hit properties in character data
- Knockdowns
- Launch reaction
- Launch Physics
- Action timeline doesn't determined returning to idle, hit stun will.
- Support returning to idle when the timer exceeds the action time on non-looping actions
- Making the asset loading code use streaming reads instead of loading into a fixed sized buffer.
- Implement the input buffer.
- Implement first non-button holding input commands (positive edge button presses).
- Separate components and system state to avoid circular dependencies. 
- Support in-game reloading of character data to support rapid iteration.
- Support two input devices to control two characters.
- Save/Load attack data from/to individual files
- In game hitbox editing.
- Movement states and transitions (Walk, Jump, Run, Air Dash, etc)
- Block reaction
- Block stun
- Hit trades
- Clean up the hit shake prototype code. Make it work for any character

2022/8/*
- Training Mode / Debug tools
- Input history buffer
- Special attack input motion detection.
- Implement special attacks
- Camera tracking



2022/9/*
- Match state (Round Start, During Match, Round End, Rematch, etc)
- Combo damage and hit stun scaling.
- Throws and the a locking mechanism.
- Super Freeze.
- Cinematics

2022/10/*
- Network session support.
- Lock-step synchronization 
- Rollbacks

** TODO **
- See if deinit() the asset allocators works properly when reloading assets.
- How do we free textures? How can we avoid reloading textures each time? 

- Setup character data that will be used in the collision system.
- Run the hitbox data through the collision system
- Create a collision event structure
- Generated hit events when hitboxes overlap

- Create test hitbox data to test collision system. 
- Test hitbox collision event generation

- Create a bunch of hitbox data for our character
- Create a second character to test hit interactions
- Create an attack action
- Create a reaction action 
- Implement a timeline data structure


- Move the TranslateHitbox function to common.zig
- Implement function for getting active attack boxes offset by the character position.
- Verify what we're doing with the character data in the test "Test clearing out scratch hitbox data each frame"


** TBD **
- Create hit properties struct
- Implement reaction system
- Implement more character states (Attack, Reaction, Jump)
- Support action state variables (action time, hit stop)
- projectiles discussion
- animation discussion
- Make new run-time structure for storing hitboxes for the collision system.

** The Back Burner **
- Look into how to deal with parsing large files with JSON.
- Look into memory allocation tradeoffs for dealing with loading data.
- What do we do about allocated memory inside of deep struct hierarchies such as strings and ArrayLists?



